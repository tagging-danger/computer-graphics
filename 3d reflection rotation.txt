#include <conio.h>
#include <math.h>
#include <stdio.h>
#include <graphics.h>
#include <iostream>

#define nullptr ((matrix*)0)

using namespace std;

int colour;
int x[10], y[10], z[10], n = 1;

int abs(int val) {
    return (val < 0) ? -val : val;
}

int sigmoid(int val) {
    if (val > 0) return 1;
    if (val < 0) return -1;
    return 0;
}

void bre(int x1, int y1, int x2, int y2) {
    int x = x1, y = y1;
    int dx = x2 - x1;
    int dy = y2 - y1;

    int xchange = sigmoid(dx);
    int ychange = sigmoid(dy);
    dx = abs(dx);
    dy = abs(dy);

    int p = 2 * dy - dx;
    int n = 0;

    if (abs(dx) > abs(dy)) {
        // for gentle slope
        while (x != x2) {
            putpixel(x, y, WHITE);
            x += xchange;

            if (p < 0)
                p += 2 * dy;
            else {
                p += 2 * dy - 2 * dx;
                y += ychange;
            }

            n++;
        }

    } else {
        // for steep slope
        while (y != y2) {
            putpixel(x, y, WHITE);
            y += ychange;

            if (p < 0)
                p += 2 * dx;
            else {
                p += 2 * dx - 2 * dy;
                x += xchange;
            }

            n++;
        }
    }
}


class matrix {
   public:
    double** val;
    int rows, cols;

    matrix(int row, int col) {
        val = new double*[row];
        for (int i = 0; i < row; i++) {
            val[i] = new double[col];

            for (int j = 0; j < col; j++)
                val[i][j] = 0;
        }

        rows = row;
        cols = col;
    }

    void flush() {
        for (int i = 0; i < rows; i++)
            delete[] val[i];
        delete val;
    }

    matrix* operator*(matrix* other) {
        if (other == nullptr || cols != other->rows) return nullptr;

        int i, j, k;
        matrix* result = new matrix(rows, other->cols);

        for (i = 0; i < rows; i++) {
            for (j = 0; j < other->cols; j++) {
                result->val[i][j] = 0;
                for (k = 0; k < other->rows; k++) {
                    result->val[i][j] += val[i][k] * other->val[k][j];
                }
            }
        }

        return result;
    }

    ~matrix() {
        flush();
    }
};


// this function returns a column matrix
matrix* col_mat(int first, int second, int third) {
    matrix* result = new matrix(4, 1);
    result->val[0][0] = first;
    result->val[1][0] = second;
    result->val[2][0] = third;
    result->val[3][0] = 1;
    return result;
}

matrix* diag4(double sx, double sy, double sz) {
    matrix* result = new matrix(4, 4);
    result->val[0][0] = sx;
    result->val[1][1] = sy;
    result->val[2][2] = sz;
    result->val[3][3] = 1;
    return result;
}



void rotate(double degree, char axis) {
    // matrix *trig = new matrix(4, 4);

    matrix* all_points = new matrix(n, 4);
    int i;
    for(i = 0; i < n; i++){
        all_points->val[i][0] = x[i];
        all_points->val[i][1] = y[i];
        all_points->val[i][2] = z[i];
        all_points->val[i][3] = 1;
    }



    matrix* trig = diag4(1, 1, 1);

    if (axis == 'x') {
        // second column
        trig->val[1][1] = cos(degree);
        trig->val[2][1] = -sin(degree);

        // third column
        trig->val[1][2] = sin(degree);
        trig->val[2][2] = cos(degree);
    }

    else if (axis == 'y') {
        // first column
        trig->val[0][0] = cos(degree);
        trig->val[2][0] = sin(degree);

        // third column
        trig->val[0][2] = -sin(degree);
        trig->val[2][2] = cos(degree);
    }

    else if (axis == 'z') {
        // first column
        trig->val[0][0] = cos(degree);
        trig->val[1][0] = -sin(degree);

        // second column
        trig->val[0][1] = sin(degree);
        trig->val[1][1] = cos(degree);
    }

    // fourth column
    trig->val[3][3] = 1;

    all_points = (*all_points) * trig;

    delete trig;
    for(i = 0; i < n; i++){
        x[i] = all_points->val[i][0];
        y[i] = all_points->val[i][1];
        z[i] = all_points->val[i][2];
    }
    cout << "\n\nAfter rotation the points are: \n";
    for(i = 0; i < n; i++){
        cout << "x: " << x[i]<<"\n";
        cout << "y: " << y[i]<<"\n";
        cout << "z: " << z[i]<<"\n";

    }


}

double torad(double degree) {
    return degree * 3.141592653f / 180;
}


void reflect(char reflection_type) {
    matrix* all_points = new matrix(n, 4);
    int i;
    for(i = 0; i < n; i++){
        all_points->val[i][0] = x[i];
        all_points->val[i][1] = y[i];
        all_points->val[i][2] = z[i];
        all_points->val[i][3] = 1;
    }

    matrix* change = nullptr;

    if (reflection_type == 'x')
        change = diag4(1, -1, -1);
    else if (reflection_type == 'y')
        change = diag4(-1, 1, -1);
    else if (reflection_type == 'z')
        change = diag4(-1, -1, 1);
    else if (reflection_type == 'o')
        change = diag4(-1, -1, -1);
    else
        return;


    all_points = (*all_points) * change;

    delete change;

    for(i = 0; i < n; i++){
        x[i] = all_points->val[i][0];
        y[i] = all_points->val[i][1];
        z[i] = all_points->val[i][2];
    }

    cout << "\n\nAfter reflection the points are: \n";
    for(i = 0; i < n; i++){
        cout << "x: " << x[i] << "\n";
        cout << "y: " << y[i] << "\n";
        cout << "z: " << z[i] << "\n";

    }
}



int main() {
    int choice;

    cout << "Enter x: "; cin >> x[0];
    cout << "Enter y: "; cin >> y[0];
    cout << "Enter z: "; cin >> z[0];

    cout << "\n\nMenu\n";
    cout << "1. Reflection\n";
    cout << "2. Rotation\n";
    cout << "3. Exit\n";

    char axis;
    double degree;

    restart:
    cout << "Enter your choice: ";
    cin >> choice;

    switch (choice) {
        case 1:
            cout << "Enter axis: "; cin >> axis;
            reflect(axis);
            break;
        case 2:
            cout << "Enter axis: "; cin >> axis;
            cout << "Enter degree: "; cin >> degree;
            rotate(degree, axis);
            break;
        case 3:
            goto end;
        default:
            cout << "Please enter a valid choice!";
            goto restart;
    }

    end:
        getch();
    return 0;
}

