#include <iostream.h>
#include <conio.h>
#include <dos.h>
#include <stdio.h>
#include<math.h>
#include <graphics.h>
#include <math.h>
void k_curve(long double x, long double y, long double l, long double ang, int
n);
void line1(int x_1, int y_1, int x_2, int y_2);
void move(int j,int h,int &x,int &y)
{
if(j==1)
y-=h;
else if(j==2)
x+=h;
else if(j==3)
y+=h;
else if(j==4)
x-=h;
lineto(x,y);
}
void hilbert(int r,int d,int l,int u,int i,int h,int &x,int &y)
{
if(i>0)
{
i--;
hilbert(d,r,u,l,i,h,x,y);
move(r,h,x,y);
hilbert(r,d,l,u,i,h,x,y);
move(d,h,x,y);
hilbert(r,d,l,u,i,h,x,y);
move(l,h,x,y);
hilbert(u,l,d,r,i,h,x,y);
}
}
void k_curve(long double x, long double y, long double length, long double
angle, int n_order)
{
if (n_order > 0)
{
length /= 3;
k_curve(x, y, length, angle, (n_order - 1));
x += (length * cosl(angle * (M_PI / 180)));
y += (length * sinl(angle * (M_PI / 180)));
k_curve(x, y, length, (angle - 60), (n_order - 1));
x += (length * cosl((angle - 60) * (M_PI / 180)));
y += (length * sinl((angle - 60) * (M_PI / 180)));
k_curve(x, y, length, (angle + 60), (n_order - 1));
x += (length * cosl((angle + 60) * (M_PI / 180)));
y += (length * sinl((angle + 60) * (M_PI / 180)));
k_curve(x, y, length, angle, (n_order - 1));
}
else
line1(x, y, (int)(x + length * cosl(angle * (M_PI / 180)) + 0.5), (int)(y 
+ length * sinl(angle * (M_PI / 180))));
}
void line1(int x_1, int y_1, int x_2, int y_2)
{
int color = getcolor();
int x1 = x_1;
int y1 = y_1;
int x2 = x_2;
int y2 = y_2;
if (x_1 > x_2)
{
x1 = x_2;
y1 = y_2;
x2 = x_1;
y2 = y_1;
}
int dx = abs(x2 - x1);
int dy = abs(y2 - y1);
int inc_dec = ((y2 >= y1) ? 1 : -1);
if (dx > dy)
{
int two_dy = (2 * dy);
int two_dy_dx = (2 * (dy - dx));
int p = ((2 * dy) - dx);
int x = x1;
int y = y1;
putpixel(x, y, color);
while (x < x2)
{
x++;
if (p < 0)
p += two_dy;
else
{
y += inc_dec;
p += two_dy_dx;
}
putpixel(x, y, color);
}
}
else
{
int two_dx = (2 * dx);
int two_dx_dy = (2 * (dx - dy));
int p = ((2 * dx) - dy);
int x = x1;
int y = y1;
putpixel(x, y, color);
while (y != y2)
{
y += inc_dec;
if (p < 0)
p += two_dx;
else
{
x++;
p += two_dx_dy;
}
putpixel(x, y, color);
}
}
}
int main()
{
do{
int ch;
cout << "Enter the choice for 3D transformation:\n1.Hilbert 
Curve\n2.Fractal Line";
cout << "\n\nChoice:";
cin >> ch;
int gd = DETECT, gm;
int i;
initgraph(&gd, &gm, "C:\\TURBOC3\\BGI");
switch(ch)
{
case 1:
do{
clrscr();
cleardevice();
int n,x1,y1;
int x0=50,y0=150,x,y,h=10,r=2,d=3,l=4,u=1;
setbkcolor(BLACK);
cout<<"\nGive the value of n: ";
cin>>n;
x=x0;y=y0;
moveto(x,y);
hilbert(r,d,l,u,n,h,x,y);
delay(1000);
getch();
clrscr();
cout<<"Press y to try again";
}while(getch()=='y');
break;
case 2:
do{
clrscr();
cleardevice();
long double x = 0;
long double y = 0;
long double l = 0;
long double angle = 0;
int n = 0;
cout << "\nStarting point of the line:(x,y):";
cout << "\nEnter the value of x=:";
cin >> x;
cout << "Enter the value of y=:";
cin >> y;
cout << "Enter the value of line l:";
cin >> l;
cout << "Angle of the line with x axis:";
cin >> angle;
cout << "Enter the order of curve=n=";
cin >> n;
clrscr();
setbkcolor(BLACK);
setcolor(YELLOW);
k_curve(x, y, l, angle, n);
getch();
clrscr();
cout<<"Press y to try again";
}while(getch()=='y');
break;
}
cout<<"Press y to try again";
clrscr();
cleardevice();
}while(getch()=='y');
}